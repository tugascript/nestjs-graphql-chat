# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

enum ChangeType {
  DELETE
  NEW
  UPDATE
}

type Chat {
  author: User!
  chatType: ChatType!
  createdAt: Timestamp!
  endOfLife: Timestamp!
  entityId: ID!
  expiration: Int!
  invitation: String
  messages(first: Int = 10): PaginatedMessages!
  name: String!
  profiles(first: Int = 10, nickname: String, order: QueryOrder = ASC): PaginatedProfiles!
  profilesCount: Int!
  slug: String!
  time: Int!
  updatedAt: Timestamp!
}

type ChatChange {
  edge: ChatRedisEntityChangeEdge!
  type: ChangeType!
}

type ChatMessage {
  body: String!
  chat: Chat!
  createdAt: Timestamp!
  endOfLife: Timestamp!
  entityId: ID!
  expiration: Int!
  profile: Profile!
  time: Int!
  updatedAt: Timestamp!
}

type ChatMessageRedisEntityChangeEdge {
  cursor: String!
  node: ChatMessage!
}

type ChatMessageRedisEntityPageEdge {
  cursor: String!
  node: ChatMessage!
}

type ChatRedisEntityChangeEdge {
  cursor: String!
  node: Chat!
}

type ChatRedisEntityPageEdge {
  cursor: String!
  node: Chat!
}

enum ChatType {
  PRIVATE
  PUBLIC
}

input CreateChatInput {
  chatType: ChatType!
  name: String!
  time: Int!
}

input CreateMessageInput {
  body: String!
  chatId: String!
}

type Message {
  id: ID!
  message: String!
}

type MessageChange {
  edge: ChatMessageRedisEntityChangeEdge!
  type: ChangeType!
}

type Mutation {
  createChat(input: CreateChatInput!): Chat!
  createMessage(input: CreateMessageInput!): ChatMessage!
  createProfile(invitation: String!): Profile!
  deleteAccount(password: String!): Message!
  leaveChat(chatId: String!): Message!
  removeChat(chatId: String!): Message!
  removeMessage(chatId: String!, messageId: String!): Message!
  removeProfile(chatId: String!, profileId: String!): Message!
  updateChat(input: UpdateChatInput!): Chat!
  updateMessage(input: UpdateMessageInput!): ChatMessage!
  updateOnlineStatus(defaultStatus: OnlineStatus!): User!
  updateOwnNickname(input: UpdateNicknameInput!): Profile!
  updateProfileDescription(description: String!): User!
  updateProfileNickname(input: UpdateProfileNicknameInput!): Profile!
}

enum OnlineStatus {
  BUSY
  DO_NOT_DISTURB
  IDLE
  INVISIBLE
  OFFLINE
  ONLINE
}

type PageInfo {
  endCursor: String!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
}

type PaginatedChats {
  currentCount: Int!
  edges: [ChatRedisEntityPageEdge!]!
  pageInfo: PageInfo!
  previousCount: Int!
}

type PaginatedMessages {
  currentCount: Int!
  edges: [ChatMessageRedisEntityPageEdge!]!
  pageInfo: PageInfo!
  previousCount: Int!
}

type PaginatedProfiles {
  currentCount: Int!
  edges: [ProfileRedisEntityPageEdge!]!
  pageInfo: PageInfo!
  previousCount: Int!
}

type PaginatedUsers {
  currentCount: Int!
  edges: [UserEntityPageEdge!]!
  pageInfo: PageInfo!
  previousCount: Int!
}

type Profile {
  chat: Chat!
  createdAt: Timestamp!
  endOfLife: Timestamp!
  entityId: ID!
  expiration: Int!
  nickname: String!
  slug: String!
  time: Int!
  updatedAt: Timestamp!
  user: User!
}

type ProfileChange {
  edge: ProfileRedisEntityChangeEdge!
  type: ChangeType!
}

type ProfileRedisEntityChangeEdge {
  cursor: String!
  node: Profile!
}

type ProfileRedisEntityPageEdge {
  cursor: String!
  node: Profile!
}

type Query {
  chatById(chatId: String!): Chat!
  chatByInvitation(invitation: String!): Chat!
  chatBySlug(slug: String!): Chat!
  chatMessages(after: String, chatId: String!, first: Int = 10): PaginatedMessages!
  chatProfiles(after: String, chatId: String!, first: Int = 10, nickname: String): PaginatedProfiles!
  me: User!
  memberChats: [Chat!]!
  messageById(chatId: String!, messageId: String!): ChatMessage!
  profileById(chatId: String!, profileId: String!): Profile!
  profileBySlug(chatId: String!, slug: String!): Profile!
  publicChats(after: String, cursor: QueryCursor = DATE, first: Int = 10, order: QueryOrder = DESC, search: String): PaginatedChats!
  userById(userId: String!): User!
  userByUsername(username: String!): User!
  userChats: [Chat!]!
  users(after: String, cursor: QueryCursor = DATE, first: Int = 10, order: QueryOrder = DESC, search: String): PaginatedUsers!
}

enum QueryCursor {
  ALPHA
  DATE
}

enum QueryOrder {
  ASC
  DESC
}

type Subscription {
  chatChange(chatId: String!): ChatChange!
  messageChange(chatId: String!): MessageChange!
  profileChange(chatId: String!): ProfileChange!
}

"""
`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

input UpdateChatInput {
  chatId: String!
  chatType: ChatType
  name: String
}

input UpdateMessageInput {
  body: String!
  chatId: String!
  messageId: String!
}

input UpdateNicknameInput {
  chatId: String!
  nickname: String!
}

input UpdateProfileNicknameInput {
  chatId: String!
  nickname: String!
  profileId: String!
}

type User {
  createdAt: Timestamp!
  defaultStatus: String
  description: String
  email: String
  id: ID!
  lastLogin: Timestamp!
  lastOnline: Timestamp!
  name: String!
  onlineStatus: OnlineStatus!
  updatedAt: Timestamp!
  username: String!
}

type UserEntityPageEdge {
  cursor: String!
  node: User!
}